// Copyright 2020 Siigo. All rights reserved.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package services;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "siigo.com/<%= config.name %>/proto;example";

message GreetingRequest {
  string name = 1;
}

message GreetingResponse {
  string greeting = 2;
}

service Greeter {
  rpc Greeting(GreetingRequest) returns (GreetingResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api
      get: "/api"
      // body: "*"
    };
  }
}


message HealthRequest {}

message HealthResponse {
  string status = 2;
}

service Health {
  rpc Health(HealthRequest) returns (HealthResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api
      get: "/api/health"
      // body: "*"
    };
  }
}

service Err {
  rpc Error(HealthRequest) returns (HealthResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api
      get: "/api/err"
      // body: "*"
    };
  }
}

message HomeAddress {
  string street = 1;
  string suite = 2;
  string city = 3;
  string state = 4;
  string zip = 5;
}


message PersonResource {

  // @inject_tag: bson:"_id"
  string id = 1 [json_name = "id"];
  // @inject_tag: validate:"required"
  string firstname = 2;
  string lastname = 3;
  string gender = 4;
  HomeAddress home_address = 5;
}

message PersonResponse {
  repeated PersonResource persons = 1;
}

message FilterCriteria {}


service Person {
  rpc AddPerson(PersonResource) returns (PersonResource) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api
      post: "/api/person"
      body: "*"
    };
  }

  rpc FindAll(FilterCriteria) returns (PersonResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api
      get: "/api/person"
    };
  }
}
