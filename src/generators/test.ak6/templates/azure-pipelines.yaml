trigger: none

pool:
  vmImage: 'ubuntu-20.04'
  
parameters:
  - name: chartName
    displayName: nombre del directorio que se encuentra en la carpeta .docker del reposotorio
    type: string
  - name: environment
    displayName: entorno al que sea dirigir la prueba
    type: string
    default: qa
    values:
      - preprod
      - qa
  - name: test
    displayName: tipo de test
    type: string
    default: load
    values:
      - load
      - soak
      - smoke
  - name: parallelism
    type: string
    default: '10'
    displayName: "cantidad de replicas de k6 a ejecutar"
  - name: claims
    displayName: incluir los claims que vienen en los headers del token  
    type: boolean
    default: false
    values:
      - true
      - false
  - name: namespace
    type: string
    default: 'load-testing'
  - name: azureEnvironment
    type: string
    default: 'ak6'

variables:
  - group: registry-dev

  - name: isQa
    value: eq(${{ parameters.test }}, 'qa')

  - name: isPreProd
    value: eq(${{ parameters.test }}, 'preprod')

stages:


  - stage: build
    jobs:
      - job: helm
        timeoutInMinutes: 20
        steps:
          - task: Npm@1
            displayName: Install NPM dependencies
            inputs:
              command: 'install'
              workingDir: '$(Build.SourcesDirectory)'

          - script: chmod -R 777 .

          - script: npm run build

          - task: DockerCompose@0
            displayName: Pull images
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'aks-qa'
              azureContainerRegistry: '{"loginServer":"acraksqa.azurecr.io", "id" : "/subscriptions/b2fd9f8c-0ed5-4f6e-9c93-75ae90718afa/resourceGroups/rgQAK8s/providers/Microsoft.ContainerRegistry/registries/acrAksQa"}'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'pull'

          - task: DockerCompose@0
            displayName: Run Seed
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'aks-qa'
              azureContainerRegistry: '{"loginServer":"acraksqa.azurecr.io", "id" : "/subscriptions/b2fd9f8c-0ed5-4f6e-9c93-75ae90718afa/resourceGroups/rgQAK8s/providers/Microsoft.ContainerRegistry/registries/acrAksQa"}'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run'
              arguments: 'k6 run dist/seed.js -e TYPE=${{ parameters.test }} -e ENV=${{ parameters.environment }} -e CLAIMS=${{ parameters.claims }}'

          - script: npm run build

          - task: DockerCompose@0
            displayName: Publish test files in Azure File Share
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'aks-qa'
              azureContainerRegistry: '{"loginServer":"acraksqa.azurecr.io", "id" : "/subscriptions/b2fd9f8c-0ed5-4f6e-9c93-75ae90718afa/resourceGroups/rgQAK8s/providers/Microsoft.ContainerRegistry/registries/acrAksQa"}'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'run'
              arguments: 'k6 run dist/seed-distributed.js -e TYPE=${{ parameters.test }} -e ENV=${{ parameters.environment }}'

          - task: HelmInstaller@1
            displayName: "Install Helm"
            inputs:
              helmVersionToInstall: 3.1.2

          - bash: helm repo add registrysiigo https://$(registryServerName)/helm/v1/repo --username $(registryLogin) --password $(registryPassword) && helm repo update
            displayName: "Add private repository"

          - bash: helm package --version $(build.buildId) --destination $(build.artifactStagingDirectory) $(system.defaultWorkingDirectory)/.docker/${{ parameters.chartName }}
            displayName: "Helm package"

          - bash: az acr helm push -n $(registryName) -u $(registryLogin) -p $(registryPassword) $(build.artifactStagingDirectory)/${{ parameters.chartName }}-$(build.buildId).tgz
            displayName: "Helm push"

  - stage: DeployAk6
    jobs:
      - deployment: deploy
        displayName: Deploy
        pool:
          vmImage: "Ubuntu-latest"
        environment: ${{ parameters.azureEnvironment }} ${{ parameters.environment }}.${{ parameters.namespace }}
        strategy:
          runOnce:
            deploy:
              steps:
                - task: HelmInstaller@1
                  displayName: "Install Helm 3.1.2"
                  inputs:
                    helmVersionToInstall: 3.1.2

                - bash: "helm repo add registrysiigo https://$(registryServerName)/helm/v1/repo --username $(registryLogin) --password $(registryPassword) && helm repo update"
                  displayName: "Add Helm Repository"

                - task: HelmDeploy@0
                  displayName: Helm Upgrade
                  inputs:
                    namespace: ${{ parameters.namespace }}
                    command: upgrade
                    chartName: registrysiigo/${{ parameters.chartName }}
                    releaseName: ${{ parameters.chartName }}-$(build.buildId)
                    arguments: "--install --force --version $(build.buildId) --set type=${{ parameters.test }} --set environment=${{ parameters.environment }} --set parallelism=${{ parameters.parallelism }}"
