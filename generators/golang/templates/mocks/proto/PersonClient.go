// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	example "siigo.com/bolt/proto"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// PersonClient is an autogenerated mock type for the PersonClient type
type PersonClient struct {
	mock.Mock
}

// AddPerson provides a mock function with given fields: ctx, in, opts
func (_m *PersonClient) AddPerson(ctx context.Context, in *example.PersonResource, opts ...grpc.CallOption) (*example.PersonResource, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *example.PersonResource
	if rf, ok := ret.Get(0).(func(context.Context, *example.PersonResource, ...grpc.CallOption) *example.PersonResource); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.PersonResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *example.PersonResource, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, in, opts
func (_m *PersonClient) FindAll(ctx context.Context, in *example.FilterCriteria, opts ...grpc.CallOption) (*example.PersonResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *example.PersonResponse
	if rf, ok := ret.Get(0).(func(context.Context, *example.FilterCriteria, ...grpc.CallOption) *example.PersonResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.PersonResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *example.FilterCriteria, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
